name: build-release
on: push
jobs:
  build:
    runs-on: [ubuntu-20.04]
    container:
      image: docker.io/growingdata/ds8-cicd:1.0.0
    steps:
      # Check out the repository
      - name: checkout-code
        uses: actions/checkout@v2

      - name: get-version
        id: get_version
        run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF:10})

      # Build the image
      - name: build-dotnet
        run: |
          echo "Building dotnet..."
          dotnet publish ./src/DbChange/DbChange.csproj -r linux-musl-x64 -c Release -o ./bin
          cp action-runner.sh ./bin/action-runner.sh

      - name: build-image
        env:
          IMAGE_DBCHANGE_DEV: ${{ secrets.IMAGE_DBCHANGE_DEV }}
        run: |
          echo "Building image..."
          SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")
          docker build -t $IMAGE_DBCHANGE_DEV:$SHORT_SHA -f ./src/docker/db-change.Dockerfile ./bin
          docker tag $IMAGE_DBCHANGE_DEV:$SHORT_SHA $IMAGE_DBCHANGE_DEV

      - name: docker-login
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          echo "Docker config"
          docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD docker.io

      - name: docker-push
        env:
          IMAGE_DBCHANGE_DEV: ${{ secrets.IMAGE_DBCHANGE_DEV }}

        run: |
          echo "Pushing dev image to dockerhub..."
          SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")
          docker push $IMAGE_DBCHANGE_DEV:$SHORT_SHA
          docker push $IMAGE_DBCHANGE_DEV

  release:
    runs-on: [ubuntu-20.04]
    container:
      image: docker.io/growingdata/ds8-cicd:1.0.0
    steps:
      - name: release-db-change
        if: contains(github.ref, 'tags')
        env:
          IMAGE_DBCHANGE_DEV: ${{ secrets.IMAGE_DBCHANGE_DEV }}
          IMAGE_DBCHANGE_RELEASE: ${{ secrets.IMAGE_DBCHANGE_RELEASE }}
        run: |
          SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")

          # Grab the built image
          docker pull $IMAGE_DBCHANGE_DEV:$SHORT_SHA

          # Push the version tagged image
          docker tag $IMAGE_DBCHANGE_DEV:$SHORT_SHA $IMAGE_DBCHANGE_RELEASE:$RELEASE_VERSION
          docker push $IMAGE_DBCHANGE_RELEASE:$RELEASE_VERSION

          # Push the "latest" tag
          docker tag $IMAGE_DBCHANGE_DEV:$SHORT_SHA $IMAGE_DBCHANGE_RELEASE
          docker push $IMAGE_DBCHANGE_RELEASE

      - name: release-action-base
        if: contains(github.ref, 'tags')
        run: |
          SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")

          # Build action-base
          docker build -t growingdata/github-action-base:$RELEASE_VERSION -f ./src/docker/action-base.Dockerfile ./src/docker/

          # Push the version tagged image
          docker tag growingdata/github-action-base:$RELEASE_VERSION growingdata/github-action-base
          docker push growingdata/github-action-base:$RELEASE_VERSION
          docker push growingdata/github-action-base
